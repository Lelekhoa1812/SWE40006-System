name: CI/CD Pipeline

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Lint and Format Check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format

  # Type Check
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Run TypeScript check
        run: pnpm typecheck

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Build backend
        run: cd backend && pnpm build

      - name: Run backend tests
        run: cd backend && pnpm test
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          NODE_ENV: test

      - name: Run backend lint
        run: cd backend && pnpm lint

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: cd frontend && pnpm build

      - name: Run frontend tests
        run: cd frontend && pnpm test
        continue-on-error: true

      - name: Run frontend lint
        run: cd frontend && pnpm lint

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Build backend
        run: cd backend && pnpm build

      - name: Start backend server
        run: |
          cd backend
          pnpm start &
          sleep 10
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          NODE_ENV: test

      - name: Test API endpoints
        run: |
          # Health check
          curl -f http://localhost:4000/health || exit 1
          echo "✅ Health check passed"

          # Test doctors endpoint
          curl -f http://localhost:4000/api/v1/doctors || exit 1
          echo "✅ Doctors endpoint passed"

          # Test auth endpoints
          curl -X POST http://localhost:4000/api/v1/auth/register \
            -H "Content-Type: application/json" \
            -d '{"username":"testuser","email":"test@test.com","password":"password123","role":"patient"}' || exit 1
          echo "✅ Registration endpoint passed"

      - name: Stop backend server
        run: pkill -f "node.*backend" || true

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Build and Deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        typecheck,
        backend-tests,
        frontend-tests,
        integration-tests,
        security-scan,
      ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Build all projects
        run: |
          cd backend && pnpm build
          cd ../frontend && pnpm build

      - name: Deploy to Railway (Backend)
        if: contains(github.event.head_commit.modified, 'backend/')
        run: |
          echo "Backend changes detected - Railway deployment would happen here"
          echo "✅ Backend deployment ready"

      - name: Deploy to Vercel (Frontend)
        if: contains(github.event.head_commit.modified, 'frontend/')
        run: |
          echo "Frontend changes detected - Vercel deployment would happen here"
          echo "✅ Frontend deployment ready"

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: echo "✅ All tests passed and deployment successful!"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: echo "❌ Tests failed or deployment failed!"
